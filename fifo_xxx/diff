--- ../fifo_sysfs/fifo.c	2013-08-16 21:52:26.489822201 -0700
+++ fifo.c	2013-08-16 21:52:27.721822158 -0700
@@ -1,7 +1,10 @@
 #include <linux/cdev.h>
+#include <linux/delay.h>
 #include <linux/device.h>
 #include <linux/fs.h>
 #include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/uaccess.h>
 
@@ -33,6 +36,37 @@
 	return 0;
 }
 
+#define DEFINE_PWAIT(uid)													\
+																			\
+static DEFINE_MUTEX(in_mtx_##uid);											\
+static DEFINE_MUTEX(out_mtx_##uid);											\
+																			\
+static void pwait_##uid(void) {												\
+	static int in = 0;														\
+	static int out = 0;														\
+																			\
+	mutex_lock(&in_mtx_##uid);												\
+	if (++in >= 2) {														\
+		mutex_lock(&out_mtx_##uid);											\
+		out += 2;															\
+		mutex_unlock(&out_mtx_##uid);										\
+		in -= 2;															\
+	}																		\
+	mutex_unlock(&in_mtx_##uid);											\
+																			\
+	do {																	\
+		mutex_lock(&out_mtx_##uid);											\
+		if (out) {															\
+			out -= 1;														\
+			mutex_unlock(&out_mtx_##uid);									\
+			break;															\
+		}																	\
+		mutex_unlock(&out_mtx_##uid);										\
+	} while (1);															\
+}
+
+DEFINE_PWAIT(fifo_read);
+
 static ssize_t fifo_read(struct file *filp, char __user *buf,
 							size_t count,
 							loff_t *f_pos)
@@ -48,6 +82,8 @@
 			break;
 		}
 
+		pwait_fifo_read();
+
 		if (copy_to_user(buf, (void *) dev->read_ptr, 1) != 0) {
 			return -EIO;
 		}
@@ -67,6 +103,8 @@
 	return (count - left);
 }
 
+DEFINE_PWAIT(fifo_write);
+
 static ssize_t fifo_write(struct file *filp, const char __user *buf,
 							size_t count,
 							loff_t *f_pos)
@@ -78,6 +116,8 @@
 
 	while (left) {
 
+		pwait_fifo_write();
+
 		if (!(dev->empty) && (dev->read_ptr == dev->write_ptr)) {
 			break;
 		}
