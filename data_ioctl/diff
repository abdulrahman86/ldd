--- ../data_chr/data.c	2013-08-10 10:17:01.359016284 -0700
+++ data.c	2013-08-11 11:08:06.287053188 -0700
@@ -15,14 +15,92 @@
 	struct cdev cdev;
 } *data_devp;
 
+
+int x;
+
+static int data_open(struct inode *inode, struct file *filp)
+{
+	struct data_dev *data_devp;
+
+	data_devp = container_of(inode->i_cdev, struct data_dev, cdev);
+
+	filp->private_data = data_devp;
+
+	return 0;
+}
+
+#define DATA_IOC_MAGIC 'm'
+
+#define DATA_IOCRESET _IO(DATA_IOC_MAGIC,  1)
+#define DATA_IOCWX	_IOW(DATA_IOC_MAGIC, 2, int)
+#define DATA_IOCRX	_IOR(DATA_IOC_MAGIC, 3, int)
+
+#define DATA_IOC_MAXNR 3
+
+static long data_ioctl(struct file *filp, unsigned int cmd,
+				unsigned long arg)
+{
+	int err = 0;
+	int retval = 0;
+
+	//struct data_dev *data_dev = filp->private_data;
+
+	if (_IOC_TYPE(cmd) != DATA_IOC_MAGIC) {
+		printk(KERN_ALERT "invalid ioctl magic\n");
+		return -ENOTTY;
+	}
+	if (_IOC_NR(cmd) > DATA_IOC_MAXNR) {
+		printk(KERN_ALERT "ioctl beyond maximum\n");
+		return -ENOTTY;
+	}
+
+	if (_IOC_DIR(cmd) & _IOC_READ)
+		err = !access_ok(VERIFY_WRITE, (void __user *) arg, _IOC_SIZE(cmd));
+	else if (_IOC_DIR(cmd) & _IOC_WRITE)
+		err = !access_ok(VERIFY_READ, (void __user *) arg, _IOC_SIZE(cmd));
+	if (err)
+		return -EFAULT;
+
+	switch (cmd) {
+		case DATA_IOCRESET:
+			/* takes no argument, sets values to default */
+			x = 0;
+			break;
+		case DATA_IOCRX:
+			/* read integer */
+			retval = __put_user(x, (int __user *) arg);
+			break;
+		case DATA_IOCWX:
+			/* write integer */
+			retval = __get_user(x, (int __user *) arg);
+			break;
+		default:
+			return -ENOTTY;  /* POSIX standard */
+			//return -EINVAL;  /* common */
+			/* Pg. 161 Linux Device Drivers (2005) */
+	}
+
+	return retval;
+}
+
+int data_release(struct inode *inode, struct file *filp)
+{
+	return 0;
+}
+
 struct file_operations data_fops = {
 	.owner = THIS_MODULE,
+	.open = data_open,
+	.unlocked_ioctl = data_ioctl,
+	.release = data_release,
 };
 
 static int __init data_init(void)
 {
 	int err = 0;
 
+	x = 0;
+
 	err = alloc_chrdev_region(&data_major, 0, 1, DEVICE_NAME);
 	if (err < 0) {
 		printk(KERN_WARNING "Unable to register device\n");
